<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>aop切面打印日志</title>
      <link href="/2022/04/17/aop-qie-mian-da-yin-ri-zhi/"/>
      <url>/2022/04/17/aop-qie-mian-da-yin-ri-zhi/</url>
      
        <content type="html"><![CDATA[<h4 id="切面日志类"><a href="#切面日志类" class="headerlink" title="切面日志类"></a>切面日志类</h4><p>主要包含几个模块：</p><ol><li>@Before: 前置通知</li><li>@After: 后置通知</li><li>@AfterThrowing: 异常通知</li><li>@AfterReturning: 最终通知</li><li>@Around: 环绕通知<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo<span class="token punctuation">.</span>aop</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">JoinPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">RequestContextHolder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebLogAspect</span> <span class="token punctuation">{</span> <span class="token comment">/** * 进入方法时间戳 */</span> <span class="token keyword">private</span> <span class="token class-name">Long</span> startTime<span class="token punctuation">;</span> <span class="token comment">/** * 方法结束时间戳(计时) */</span> <span class="token keyword">private</span> <span class="token class-name">Long</span> endTime<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token class-name">WebLogAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">/**  * 定义请求日志切入点，其切入点表达式有多种匹配方式,这里是指定路径  *第一个.*代表controller下所有的类  * 第二个.*代表每个类里面的方法  * (..)代表每个方法中的参数 */</span> <span class="token comment">//@Pointcut("@annotation(com.demo.annotation.Log)") // 通过注解</span> <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(public * demo.controller.*.*(..))"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">webLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">/** * 前置通知： * 1. 在执行目标方法之前执行，比如请求接口之前的登录验证; * 2. 在前置通知中设置请求日志信息，如开始时间，请求参数，注解内容等 * * @param joinPoint * @throws Throwable */</span> <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"webLog()"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBefore</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 接收到请求，记录请求内容</span>  <span class="token class-name">ServletRequestAttributes</span> attributes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取参数</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//打印请求的内容</span>  startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求开始时间：{}"</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求Url : {}"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求方式 : {}"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求ip : {}"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求方法 : "</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求参数 : {}"</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">/** * 返回通知： * 1. 在目标方法正常结束之后执行 * 1. 在返回通知中补充请求日志信息，如返回时间，方法耗时，返回值，并且保存日志信息 * * @param ret * @throws Throwable */</span> <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>returning <span class="token operator">=</span> <span class="token string">"ret"</span><span class="token punctuation">,</span> pointcut <span class="token operator">=</span> <span class="token string">"webLog()"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterReturning</span><span class="token punctuation">(</span><span class="token class-name">Object</span> ret<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>     endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求结束时间：{}"</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求耗时：{}"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 处理完请求，返回内容</span>     log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求返回 : {}"</span> <span class="token operator">+</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">/** * 异常通知： * 1. 在目标方法非正常结束，发生异常或者抛出异常时执行 * 1. 在异常通知中设置异常信息，并将其保存 * * @param throwable */</span> <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"webLog()"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"throwable"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterThrowing</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 保存异常日志记录</span>     log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"发生异常时间：{}"</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"抛出异常：{}"</span> <span class="token operator">+</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="操作日志如何和系统日志区分开"><a href="#操作日志如何和系统日志区分开" class="headerlink" title="操作日志如何和系统日志区分开"></a>操作日志如何和系统日志区分开</h4><ol><li><p>logback配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">//不同业务日志记录到不同的文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>businessLogAppender<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span><span class="token punctuation">&gt;</span></span>logs/business.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>append</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>append</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">&gt;</span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">&gt;</span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>logs/业务A.%d.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">&gt;</span></span>90<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>10MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>"%d{yyyy-MM-dd HH:mm:ss.SSS} %t %-5level %X{userId} %logger{30}.%method:%L - %msg%n"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- additivity=false时不会在往上一级root打印，只在当前appender打印 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>businessLog<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>businessLogAppender<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p> Java 代码配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//记录特定日志的声明</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> businessLog <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"businessLog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//日志存储</span>businessLog<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> aop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ORACLE 使用与慢查询分析</title>
      <link href="/2018/09/07/oracle-shi-yong-yu-man-sql-fen-xi/"/>
      <url>/2018/09/07/oracle-shi-yong-yu-man-sql-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="ORACLE-使用与慢查询分析"><a href="#ORACLE-使用与慢查询分析" class="headerlink" title="ORACLE 使用与慢查询分析"></a>ORACLE 使用与慢查询分析</h1><h4 id="表空间和用户赋权"><a href="#表空间和用户赋权" class="headerlink" title="表空间和用户赋权"></a>表空间和用户赋权</h4><p>创建用户，用户名一般是工程名或者能标识一个工程的名称。例如cbbank-athena工程：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> athena identified <span class="token keyword">by</span> athena<span class="token keyword">grant</span> <span class="token keyword">connect</span><span class="token punctuation">,</span>resource<span class="token punctuation">,</span>dba <span class="token keyword">to</span> athena <span class="token comment">/*按需分配权限*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建表空间和索引空间，表空间格式d_用户名，索引空间格式i_用户名：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*表空间*/</span><span class="token keyword">create</span> <span class="token keyword">tablespace</span> d_athenaloggingdatafile <span class="token string">'/home/oracle/app/d_athena.dbf'</span>size <span class="token number">50</span>mautoextend <span class="token keyword">on</span><span class="token keyword">next</span> <span class="token number">50</span>m maxsize <span class="token number">20480</span>mextent management <span class="token keyword">local</span><span class="token punctuation">;</span><span class="token comment">/*索引空间*/</span><span class="token keyword">create</span> <span class="token keyword">tablespace</span> i_athenaloggingdatafile <span class="token string">'/home/oracle/app/i_athena.dbf'</span>size <span class="token number">50</span>mautoextend <span class="token keyword">on</span><span class="token keyword">next</span> <span class="token number">50</span>m maxsize <span class="token number">20480</span>mextent management <span class="token keyword">local</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SEQUENCE"><a href="#SEQUENCE" class="headerlink" title="SEQUENCE"></a>SEQUENCE</h4><p>CACHE、CYCLE、NOORDER三项为必选参数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--创建 SEQUENCE</span><span class="token keyword">CREATE</span> SEQUENCE athena<span class="token punctuation">.</span>config_seqINCREMENT <span class="token keyword">BY</span> <span class="token number">1</span>    <span class="token comment">/*每次增量*/</span> <span class="token keyword">START</span> <span class="token keyword">WITH</span> <span class="token number">10000</span>   <span class="token comment">/*开始的值*/</span>     MINVALUE <span class="token number">10000</span>    <span class="token comment">/*最小值*/</span> MAXVALUE <span class="token number">999999999</span>  <span class="token comment">/*最大值*/</span> CACHE <span class="token number">1000</span>       <span class="token comment">/*预生成序列*/</span> <span class="token keyword">CYCLE</span>         <span class="token comment">/*是否循环*/</span> NOORDER<span class="token punctuation">;</span>       <span class="token comment">/*是否按请求顺序分配，用了CACHE后就是NOORDER*/</span> <span class="token comment">-- 更新序列</span><span class="token keyword">alter</span> sequence  athena<span class="token punctuation">.</span>config_seqmaxvalue <span class="token number">999999999</span>increment <span class="token keyword">by</span> <span class="token number">11</span>CACHE <span class="token number">5000</span><span class="token keyword">cycle</span> NOORDER<span class="token punctuation">;</span><span class="token comment">-- 删除序列</span><span class="token keyword">drop</span> sequence athena<span class="token punctuation">.</span>config_re<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--创建表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> athena<span class="token punctuation">.</span>config<span class="token punctuation">(</span>id       number<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>service    number<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">type</span>      varchar2<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">tablespace</span> d_athena<span class="token punctuation">;</span><span class="token comment">-- 增加主键</span><span class="token keyword">alter</span> <span class="token keyword">table</span> athena<span class="token punctuation">.</span>config <span class="token keyword">add</span> <span class="token keyword">constraint</span> pk_config <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">using</span> <span class="token keyword">index</span> <span class="token keyword">tablespace</span> i_athena<span class="token punctuation">;</span><span class="token comment">-- 增加唯一索引要先创建索引再创建唯一约束</span><span class="token keyword">create</span> <span class="token keyword">index</span> i_config_service_type <span class="token keyword">on</span> athena<span class="token punctuation">.</span>config<span class="token punctuation">(</span>service<span class="token punctuation">,</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token keyword">tablespace</span> i_athena<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> athena<span class="token punctuation">.</span>config <span class="token keyword">add</span> <span class="token keyword">constraint</span> uni_config_service <span class="token keyword">unique</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 给表和字段增加注释</span><span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">table</span> athena<span class="token punctuation">.</span>config <span class="token operator">is</span> <span class="token string">'微服务API附加配置表'</span><span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">column</span> athena<span class="token punctuation">.</span>config<span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token string">'唯一编号'</span><span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">column</span> athena<span class="token punctuation">.</span>config<span class="token punctuation">.</span>service <span class="token operator">is</span> <span class="token string">'service编号'</span><span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">column</span> athena<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">is</span> <span class="token string">'类型'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分区表操作"><a href="#分区表操作" class="headerlink" title="分区表操作"></a>分区表操作</h4><p>分区表可以根据实际需求按时间或者id。</p><p>分区表不推荐建立主键以外的全局索引</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 建表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> athena<span class="token punctuation">.</span>flow<span class="token punctuation">(</span>id       number<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>trace_id    number<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span>channel_no   varchar2<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>create_time  <span class="token keyword">timestamp</span><span class="token punctuation">)</span> <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>create_time<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">PARTITION</span> flow_202104 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span>to_timestamp<span class="token punctuation">(</span><span class="token string">'2021-04-01 00:00:00'</span><span class="token punctuation">,</span><span class="token string">'yyyy-MM-dd hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> flow_202105 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span>to_timestamp<span class="token punctuation">(</span><span class="token string">'2021-05-01 00:00:00'</span><span class="token punctuation">,</span><span class="token string">'yyyy-MM-dd hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">TABLESPACE</span> d_athena<span class="token punctuation">;</span><span class="token comment">-- 创建全局主键</span><span class="token keyword">alter</span> <span class="token keyword">table</span> athena<span class="token punctuation">.</span>flow <span class="token keyword">add</span> <span class="token keyword">constraint</span> pk_flow <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">using</span> <span class="token keyword">index</span> <span class="token keyword">tablespace</span> i_athena<span class="token punctuation">;</span><span class="token comment">-- 创建分区索引，需要带上local才是分区索引</span><span class="token keyword">create</span> <span class="token keyword">index</span> i_flow_create_time <span class="token keyword">on</span> athena<span class="token punctuation">.</span>flow<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span> <span class="token keyword">local</span> <span class="token keyword">tablespace</span> i_athena<span class="token punctuation">;</span><span class="token comment">-- 新增分区</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> athena<span class="token punctuation">.</span>flow <span class="token keyword">ADD</span> <span class="token keyword">PARTITION</span> flow_202106 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span>to_timestamp<span class="token punctuation">(</span><span class="token string">'2021-06-01 00:00:00'</span><span class="token punctuation">,</span><span class="token string">'yyyy-MM-dd hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ORACLE-使用与慢查询分析-1"><a href="#ORACLE-使用与慢查询分析-1" class="headerlink" title="ORACLE 使用与慢查询分析"></a>ORACLE 使用与慢查询分析</h4><ol><li>查询全部数据，生产代码禁止使用全量查询。执行计划走的是全表，根据id从大到小执行。</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询全部数据，生产代码禁止使用全量查询</span><span class="token keyword">explain</span> <span class="token keyword">plan</span> <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> athena<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token comment">-- 显示执行计划</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span><span class="token punctuation">(</span>dbms_xplan<span class="token punctuation">.</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/ORACLE_img/sql1.png"></p><ol start="2"><li>分区表查询全部数据，生产代码禁止使用全量查询，执行计划走的是全表全分区。</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--分区表查询全量数据，生产代码禁止使用全量查询，查询必须带上分区条件</span><span class="token keyword">explain</span> <span class="token keyword">plan</span> <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> athena<span class="token punctuation">.</span>flow<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span><span class="token punctuation">(</span>dbms_xplan<span class="token punctuation">.</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/medias/ORACLE_img/sql2.png"></p><ol start="3"><li>使用索引查询</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 索引service 查询，走的是索引</span><span class="token keyword">explain</span> <span class="token keyword">plan</span> <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ATHENA<span class="token punctuation">.</span>CONFIG <span class="token keyword">where</span> service <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span><span class="token punctuation">(</span>dbms_xplan<span class="token punctuation">.</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/medias/ORACLE_img/sql6.png"></p><p> 如果使用不等号，走的是全表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 索引service 不等于号</span><span class="token keyword">explain</span> <span class="token keyword">plan</span> <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ATHENA<span class="token punctuation">.</span>CONFIG <span class="token keyword">where</span> service <span class="token operator">&lt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span><span class="token punctuation">(</span>dbms_xplan<span class="token punctuation">.</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/medias/ORACLE_img/sql7.png"></p><p>要避免在索引列上进行计算、函数、（显式/隐式）类型转换</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">---- 使用计算：</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> dept <span class="token keyword">WHERE</span> salary <span class="token operator">*</span> <span class="token number">12</span> <span class="token operator">&gt;</span> <span class="token number">25000</span><span class="token punctuation">;</span><span class="token comment">---- 函数运算：</span><span class="token keyword">SELECT</span> <span class="token keyword">time</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> DATE_ADD<span class="token punctuation">(</span><span class="token keyword">time</span><span class="token punctuation">,</span> <span class="token keyword">INTERVAL</span> <span class="token number">7</span> <span class="token keyword">DAY</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">---- 类型转换：</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> staff <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// name(var_char) number =&gt; var_char</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 对数字使用like，走的是全表，隐式转换</span><span class="token keyword">explain</span> <span class="token keyword">plan</span> <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ATHENA<span class="token punctuation">.</span>CONFIG <span class="token keyword">where</span> service <span class="token operator">like</span> <span class="token string">'1%'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span><span class="token punctuation">(</span>dbms_xplan<span class="token punctuation">.</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/medias/ORACLE_img/sql8.png"></p><ol start="4"><li>组合索引查询，组合索引尽量使用索引的全部字段，可以缺后项，但不能缺前项。执行计划可以看到使用组合索引，缺了前项后，走的是全表。</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--组合索引</span><span class="token keyword">explain</span> <span class="token keyword">plan</span> <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ATHENA<span class="token punctuation">.</span>CONFIG <span class="token keyword">where</span> service <span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token keyword">type</span><span class="token operator">=</span><span class="token string">'d'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span><span class="token punctuation">(</span>dbms_xplan<span class="token punctuation">.</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/medias/ORACLE_img/sql3.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--组合索引前项</span><span class="token keyword">explain</span> <span class="token keyword">plan</span> <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ATHENA<span class="token punctuation">.</span>CONFIG <span class="token keyword">where</span> service<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span><span class="token punctuation">(</span>dbms_xplan<span class="token punctuation">.</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/medias/ORACLE_img/sql4.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 只用组合索引后项，全表</span><span class="token keyword">explain</span> <span class="token keyword">plan</span> <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ATHENA<span class="token punctuation">.</span>CONFIG <span class="token keyword">where</span> <span class="token keyword">TYPE</span><span class="token operator">=</span><span class="token string">'d'</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span><span class="token punctuation">(</span>dbms_xplan<span class="token punctuation">.</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/medias/ORACLE_img/sql5.png"></p><p>5.分区表查询时候，条件中要带上分区键</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 分区，local索引</span><span class="token keyword">explain</span> <span class="token keyword">plan</span> <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ATHENA<span class="token punctuation">.</span>flow <span class="token keyword">where</span> create_time <span class="token operator">&gt;</span> to_timestamp<span class="token punctuation">(</span><span class="token string">'2021-04-01 00:00:00'</span><span class="token punctuation">,</span><span class="token string">'yyyy-MM-dd hh24:mi:ss'</span><span class="token punctuation">)</span> <span class="token operator">and</span>  create_time <span class="token operator">&lt;</span> to_timestamp<span class="token punctuation">(</span><span class="token string">'2021-04-10 00:00:00'</span><span class="token punctuation">,</span><span class="token string">'yyyy-MM-dd hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/medias/ORACLE_img/sql10.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 跨分区</span><span class="token keyword">explain</span> <span class="token keyword">plan</span> <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ATHENA<span class="token punctuation">.</span>flow <span class="token keyword">where</span> create_time <span class="token operator">&gt;</span> to_timestamp<span class="token punctuation">(</span><span class="token string">'2021-02-01 00:00:00'</span><span class="token punctuation">,</span><span class="token string">'yyyy-MM-dd hh24:mi:ss'</span><span class="token punctuation">)</span> <span class="token operator">and</span>  create_time <span class="token operator">&lt;</span> to_timestamp<span class="token punctuation">(</span><span class="token string">'2021-04-10 00:00:00'</span><span class="token punctuation">,</span><span class="token string">'yyyy-MM-dd hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/medias/ORACLE_img/sql11.png"></p><ol start="6"><li>避免使用NOT IN 后面是大表，如果业务需要可以使用NOT EXISTS或者OUTER JOINS</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- B是个大表</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> FORM A <span class="token keyword">WHERE</span> col <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> col <span class="token keyword">FROM</span> B<span class="token punctuation">)</span><span class="token comment">-- =&gt; 应该使用</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> FORM A <span class="token keyword">WHERE</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> col <span class="token keyword">FROM</span> B <span class="token keyword">WHERE</span> A<span class="token punctuation">.</span>col <span class="token operator">=</span> B<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>避免使用OR关联索引列和非索引列，如果业务需要就用UNION代替</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- id均为索引，age为非索引</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">or</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">-- =&gt; 应该使用</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>避免在索引列上使用IS NULL和IS NOT NULL ，推荐在建表时把索引列设为not null</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">---- 单列索引：如果列包含空值，索引中将不存在此记录。</span><span class="token comment">---- 复合索引：如果每个列都为空，索引中同样不存在此记录。如果有一个列不为空，则记录存在于索引中。</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span>  department <span class="token keyword">WHERE</span> dept_code <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment">-- =&gt; 应该使用</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span>  department <span class="token keyword">WHERE</span> dept_code <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9"><li>避免在WHERE条件中索引列使用!=或者&lt;&gt;，使用模糊查询时避免使用前导%，除非索引覆盖完全即所有条件和查询列均为索引。能不使用模糊查询时，尽量不使用。</li></ol><h4 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h4><ol><li><p>根据需要用UNION ALL替换UNION</p><p>UNION：对结果进行排序去重；<br>UNION-ALL：不排序，不去重；</p><p>业务场景允许的情况下使用UNION-ALL代替UNION</p></li><li><p>尽量避免使用 <em>，不要获取不必要的字段，将</em>依次转换为列名时，通过查询数据字典完成，浪费时间</p></li><li><p>用EXISTS替换DISTINCT</p></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 当查询中包含的表之间有一对多的关系时,避免在SELECT子句中使用DISTICT,可以使用EXISTS替换。</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> d<span class="token punctuation">.</span>dept_no<span class="token punctuation">,</span>d<span class="token punctuation">.</span>dept_name <span class="token keyword">FROM</span> dept d<span class="token punctuation">,</span>emp e <span class="token keyword">WHERE</span> d<span class="token punctuation">.</span>deptno <span class="token operator">=</span> e<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span class="token comment">-- ==&gt;</span><span class="token keyword">SELECT</span> d<span class="token punctuation">.</span>deptno<span class="token punctuation">,</span>d<span class="token punctuation">.</span>dname <span class="token keyword">FROM</span> dept d<span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">'X'</span> <span class="token keyword">FROM</span> emp e <span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li> 用Where子句替换HAVING子句</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- HAVING在检索出所有记录后进行过滤，会进行排序等操作。</span><span class="token keyword">SELECT</span> job<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token keyword">temp</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> job <span class="token keyword">HAVING</span> job <span class="token operator">=</span> <span class="token string">'STUDENT'</span> <span class="token operator">OR</span> job <span class="token operator">=</span> <span class="token string">'MANAGER'</span><span class="token punctuation">;</span><span class="token comment">-- ==&gt;</span><span class="token keyword">SELECT</span> job<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> job <span class="token operator">=</span> <span class="token string">'STUDENT'</span> <span class="token operator">OR</span> job <span class="token operator">=</span> <span class="token string">'MANAGER'</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> job<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><p>在清空表内容，并且不需要恢复的情况下使用TRUNCATE更高效</p></li><li><p>合理使用EXISTS和IN</p></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- IN不走索引，区分三种情况：</span><span class="token comment">-- 1、两张表规模在同一数量级，使用IN和使用EXISTS效率差不多；</span><span class="token comment">-- 2、A大表，B小表：</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> FORM A <span class="token keyword">WHERE</span> col <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> col <span class="token keyword">FROM</span> B<span class="token punctuation">)</span><span class="token comment">-- 3、A小表，B大表：</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> FORM A <span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> col <span class="token keyword">FROM</span> B <span class="token keyword">WHERE</span> A<span class="token punctuation">.</span>col <span class="token operator">=</span> B<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li><p>关联大表时必须使用索引</p></li><li><p>以下情况下索引重建提高效率</p></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 顺序执行以下SQL</span><span class="token comment">-- 1、VALIDATE INDEX 用户名.索引名</span><span class="token comment">-- 2、</span><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>height<span class="token punctuation">,</span> del_lf_rows<span class="token punctuation">,</span> lf_rows<span class="token punctuation">,</span> <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token punctuation">(</span>del_lf_rows<span class="token operator">/</span><span class="token punctuation">(</span>lf_rows<span class="token operator">+</span><span class="token number">0.0000000001</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token string">"Frag Percent"</span> <span class="token keyword">FROM</span> index_stats<span class="token comment">-- 如果索引的叶子行的碎片（Frag Percent）&gt;10% 或者 height &gt; 3, 可以考虑对索引进行重建; </span><span class="token comment">-- 执行以下SQL</span><span class="token keyword">SELECT</span> extents <span class="token keyword">FROM</span> DBA_SEGMENTS <span class="token keyword">WHERE</span> owner<span class="token operator">=</span><span class="token string">'SYS'</span> <span class="token operator">and</span> segment_name<span class="token operator">=</span><span class="token string">'index_name'</span><span class="token punctuation">;</span><span class="token comment">-- 如果extents &gt;10，可以考虑对索引进行重建; </span><span class="token comment">-- 重建SQL：</span> <span class="token keyword">ALTER</span> <span class="token keyword">INDEX</span> 索引名 REBUILD  <span class="token keyword">TABLESPACE</span> 索引表空间名  STORAGE<span class="token punctuation">(</span>INITIAL 初始值 <span class="token keyword">NEXT</span> 扩展值<span class="token punctuation">)</span>  NOLOGGING；<span class="token comment">-- 重建后比较索引的Clustering Factor值有没有下降。</span><span class="token keyword">SELECT</span> owner<span class="token punctuation">,</span>index_name<span class="token punctuation">,</span> clustering_factor<span class="token punctuation">,</span> num_rows <span class="token keyword">from</span> dba_indexes <span class="token keyword">WHERE</span> owner<span class="token operator">=</span><span class="token string">'xxx'</span> <span class="token operator">and</span> index_name<span class="token operator">=</span><span class="token string">'xxx'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="特殊场景查询语句分析"><a href="#特殊场景查询语句分析" class="headerlink" title="特殊场景查询语句分析"></a>特殊场景查询语句分析</h4>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot内嵌Tomcat性能测试</title>
      <link href="/2018/09/07/springboot-nei-qian-tomcat-xing-neng-ce-shi/"/>
      <url>/2018/09/07/springboot-nei-qian-tomcat-xing-neng-ce-shi/</url>
      
        <content type="html"><![CDATA[<h4 id="测试目标"><a href="#测试目标" class="headerlink" title="测试目标"></a>测试目标</h4><p>首先要明确测试目标，测试目标包含并发用户数、并发时间、需要到达的tps和成功率。包含以下两个场景</p><ol><li>稳定性：1000并发用户数，12小时，tps1000以上，响应成功率100%</li><li>峰值：1000并发用户数，10分钟，tps5000以上，响应成功率100%</li></ol><p>以稳定性为例，生产环境4个进程需要达到1000tps，则每个进程需要250tps，生产环境按测试环境50%计算，那么测试环境压测单进程需要达到500tps。</p><h4 id="影响TPS因素"><a href="#影响TPS因素" class="headerlink" title="影响TPS因素"></a>影响TPS因素</h4><ol><li><p><strong>服务器的资源</strong>：CPU（资源、使用率）、内存（资源、使用率）、磁盘性能（写日志）</p></li><li><p><strong>网络带宽</strong>（大量传输数据场景需要考虑）：单位时间内传递的数据包太大，超过带宽的传输能力，间接造成服务器处理请求数量达不到上限</p></li><li><p><strong>数据库配置</strong>：如果请求数据需要写入数据库，且需要写入多个表的时候，如果数据库的最大连接数不够，或者没有主从分离、读写分离等，就会导致数据库事务处理过慢，影响到TPS。</p></li><li><p><strong>连接池</strong>： 连接池中可用连接数量不够，一般分为服务器连接池（比如Tomcat）和数据库连接池（或者理解为最大允许连接数也行）</p></li><li><p><strong>应用限制</strong>：JVM内存，最大请求数，最大监听队列，最大线程数</p></li><li><p><strong>通信连接机制</strong>：串行、并行、长连接、管道连接等不同连接方式</p></li><li><p><strong>业务逻辑处理方式</strong>：同步、异步（内存、消息中心）</p></li><li><p><strong>压力机</strong>：单机压测，分布式多机压测</p><h4 id="测试方式"><a href="#测试方式" class="headerlink" title="测试方式"></a>测试方式</h4></li><li><p>通过本机Jemter对服务器进行并发的测试（测试结果需要考虑本机的限制）。</p></li><li><p>通过压测部门，多台机器进行并发测试。</p><h4 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h4></li><li><p>选择空闲服务器部署需要压测的服务，如果并发要求比较高，可以增加服务器资源（CPU和内存），打开服务器限制（进程最大读取fd数，最大监听队列，系统fd总打开数）。</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain"># 打开进程最大文件数（open files）限制。# 设置单进程打开fd限制（用户）vim /etc/security/limits.conf # 追加：　*  hard  nofile    65535*  soft  nofile    65535以上配置为推荐值# 全局fd打开限制vim /etc/sysctl.conffs.file-max = 2000000 # 系统最大能打开的fd数fs.nr_open = 2000000  # 单一进程能打开的fd数以上配置为推荐值#注意：设置nofile的hard limit还有一点要注意的就是hard limit不能大于/proc/sys/fs/nr_open， 假如hard limit大于nr_open，注销后将无法正常登录。# tcp 相关队列net.ipv4.tcp_max_syn_backlog = 8192 # tcp半连接队列（握手用）以上配置为推荐值# 监听队列，操作系统和服务配置的最小值，下列配置监听队列实际为20操作系统设置1024： net.core.somaxconn = 1024 以上配置为推荐值服务20:new ServerSocket(9090,20),tomcat默认值100tomcat推荐值（默认值）100（100） nginx推荐值（默认值）512（512）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li>配置应用相关的参数<pre class="line-numbers language-plain" data-language="plain"><code class="language-plain"># 最大连接数 推荐值（默认值）8192（8192）server.tomcat.max-connections=8192# tomcat监听队列 受到操作系统最大监听队列的约束# 推荐值（默认值）100(100)server.tomcat.accept-count=100# 业务线程数# 推荐值（默认值）根据内存和cpu资源调整 (200)server.tomcat.max-threads=200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>部署和配置性能监控相关的工具，springboot admin监控，prometheus监控。</li></ol><p>压测过程中需要关注以下指标</p><p>cpu使用率：目标接近90%</p><p>内存使用率：使用接近JVM分配内存，JVM内存分配后需要给操作系统和其他服务预留一定资源</p><p>JVM gc情况：gc耗时</p><p>JVM线程状态：是否有很时间等待和死锁</p><p>磁盘IO：大量读写时需要关注</p><p>网络IO：大量数据传输时需要关注</p><ol start="4"><li>进行压测，并发量未达到目标可能存在的情况。<pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">1.报错：根据报错日志分析2.应用挂了：一般先考虑内存泄漏3.服务器负载满但没有达到期望并发：扩CPU和内存4.服务器负载较低：考虑io和死锁的问题，io情况下可以根据数据库的负载，调大处理线程和连接池<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>参考配置</li></ol><p>数据库连接数：（10-10）根据需要调整</p><p>tomcat线程数：默认200，一般够用</p><p>JVM内存：2G</p><p>异步线程池大小：推荐小于20</p><p>gc方式：4G以下 默认PSPO 4G以上G1</p><h4 id="性能参考"><a href="#性能参考" class="headerlink" title="性能参考"></a>性能参考</h4><table><thead><tr><th align="left">服务器</th><th align="left">JVM内存</th><th align="left">并发用户</th><th align="left">压测时间</th><th align="left">TPS</th><th align="left">网络(Mbps)</th><th align="left">CPU</th><th align="left">内存</th></tr></thead><tbody><tr><td align="left">2C 4G</td><td align="left">2G</td><td align="left">1000</td><td align="left">12小时</td><td align="left">1500</td><td align="left">95</td><td align="left">80%</td><td align="left">50%</td></tr><tr><td align="left">4C 8G</td><td align="left">4G</td><td align="left">1000</td><td align="left">12小时</td><td align="left">1700</td><td align="left">95</td><td align="left">70%</td><td align="left">50%</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora-vue-theme主题介绍</title>
      <link href="/2018/09/07/hello-world/"/>
      <url>/2018/09/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
